{
  "LogicType.Activate": "1 если устройство активировано (обычно означает, что оно работает), иначе 0",
  "LogicType.AirRelease": "Текущее состояние системы подачи воздуха, например AirRelease = 1 для прочного скафандра включает подачу воздуха",
  "LogicType.Charge": "Текущий заряд устройства",
  "LogicType.ClearMemory": "При значении 1, очищает память счетчика (например, ExportCount). Будет установлен обратно в 0 когда сработает",
  "LogicType.Color": "Whether driven by concerns for clarity, safety or simple aesthetics, Stationeers have access to a small rainbow of colors for their constructions. These are the color setting for devices, represented as an integer.\n\n        0: Blue\n        1: Grey\n        2: Green\n        3: Orange\n        4: Red\n        5: Yellow\n        6: White\n        7: Black\n        8: Brown\n        9: Khaki\n        10: Pink\n        11: Purple\n\n        It is an unwavering universal law that anything higher than 11 will be purple. The ODA is powerless to change this. Similarly, anything lower than 0 will be Blue.",
  "LogicType.Combustion": "Оценивает наличие пожара в атмосфере. Возвращает 1 если атмосфера в огне, 0 если нет.",
  "LogicType.CompletionRatio": "Насколько завершена текущая продукция для этого устройства, от 0 до 1",
  "LogicType.ElevatorLevel": "Этаж, на котором в данный момент находится лифт",
  "LogicType.ElevatorSpeed": "Текущая скорость лифта",
  "LogicType.Error": "1 если устройство в состоянии ошибки, иначе 0",
  "LogicType.ExportCount": "Сколько предметов было экспортировано с момента последнего ClearMemory",
  "LogicType.Filtration": "Текущее состоянии системы фильтрации, например Filtration = 1 для усиленного шлема включает фильтрацию",
  "LogicType.ForceWrite": "Заставляет чип-Запись перезаписывать значение",
  "LogicType.Harvest": "Выполняет сбор урожая для любого оборудования взаимодействующего с растениями",
  "LogicType.Horizontal": "Настройка горизонтального угла устройства",
  "LogicType.HorizontalRatio": "Коэффициент горизонтальной настройки устройства",
  "LogicType.Idle": "Возвращает 1, если устройство в данный момент ожидает, иначе 0",
  "LogicType.ImportCount": "Сколько предметов было импортировано с момента последнего ClearMemory",
  "LogicType.Lock": "1 если устройство заблокировано, иначе 0, может быть установлено в большинстве устройств и не дает пользователю доступа к значениям",
  "LogicType.ManualResearchRequiredPod": "Определяет тип модуля для поиска определенного пакета при его поломке.",
  "LogicType.Maximum": "Максимальная настройка устройства",
  "LogicType.MineablesInQueue": "Возвращает количество предметов помеченных к добыче в очереди AIMEe.",
  "LogicType.MineablesInVicinity": "Возвращает количество предметов потенциально пригодных к добыче в пределах расширенной области вокруг AIMEe.",
  "LogicType.Mode": "Целое число для состояния режима, различные устройства будут иметь разные состояния режима",
  "LogicType.NextWeatherEventTime": "Возвращает в секундах, когда наступит следующее погодное событие.",
  "LogicType.On": "Текущее состояние устройства, 0 для выключения, 1 для включения",
  "LogicType.Open": "1, если устройство открыто, иначе 0",
  "LogicType.Output": "Операция вывода для устройства управления сортировкой, такого как укладчик или сортировщик. В логическом режиме, устройство выполняет только одно повторение, когда оно установлено на ноль или выше, затем снова в -1 и ждет дальнейших инструкций",
  "LogicType.Plant": "Осуществляет посадку в гидропонных машинах",
  "LogicType.PositionX": "Текущая позиция по оси X в мировых координатах",
  "LogicType.PositionY": "Текущая позиция по оси Y в мировых координатах",
  "LogicType.PositionZ": "Текущая позиция по оси Z в мировых координатах",
  "LogicType.Power": "Возвращает значение, которое указывает включено ли устройство, 1 включено и 0 выключено",
  "LogicType.PowerActual": "Сколько энергии устройство или сеть потребляет в данный момент",
  "LogicType.PowerGeneration": "Возвращает, сколько энергии генерируется",
  "LogicType.PowerPotential": "Сколько энергии потенциально обеспечивает устройство или сеть",
  "LogicType.PowerRequired": "Запрашивается питание от устройства и/или сети",
  "LogicType.PrefabHash": "Хеш структуры",
  "LogicType.Pressure": "Текущее показание давления устройства",
  "LogicType.PressureExternal": "Настройка внешнего давления, в KPa",
  "LogicType.PressureInternal": "Настройка внутреннего давления, в KPa",
  "LogicType.PressureSetting": "Текущие параметры для внутреннего давления объекта (к примеру: (Air release) подача воздуха в Прочном Скафандре), в кПа",
  "LogicType.Quantity": "Общее количество на устройстве",
  "LogicType.Ratio": "Контекстно-зависимое значение устройства, соотношение от 0 до 1",
  "LogicType.RatioCarbonDioxide": "Процент CO2 в атмосфере",
  "LogicType.RatioCarbonDioxideInput": "The ratio of Углекислый газ in device's input network",
  "LogicType.RatioCarbonDioxideInput2": "The ratio of Углекислый газ in device's Input2 network",
  "LogicType.RatioCarbonDioxideOutput": "The ratio of Углекислый газ in device's Output network",
  "LogicType.RatioCarbonDioxideOutput2": "The ratio of Углекислый газ in device's Output2 network",
  "LogicType.RatioHydrogen": "The ratio of Водород in device's Atmopshere",
  "LogicType.RatioLiquidCarbonDioxide": "The ratio of Жидкий углекислый газ in device's Atmosphere",
  "LogicType.RatioLiquidCarbonDioxideInput": "The ratio of Жидкий углекислый газ in device's Input Atmosphere",
  "LogicType.RatioLiquidCarbonDioxideInput2": "The ratio of Жидкий углекислый газ in device's Input2 Atmosphere",
  "LogicType.RatioLiquidCarbonDioxideOutput": "The ratio of Жидкий углекислый газ in device's device's Output Atmosphere",
  "LogicType.RatioLiquidCarbonDioxideOutput2": "The ratio of Жидкий углекислый газ in device's Output2 Atmopshere",
  "LogicType.RatioLiquidHydrogen": "The ratio of Жидкий водород in device's Atmopshere",
  "LogicType.RatioLiquidNitrogen": "The ratio of Жидкий азот in device atmosphere",
  "LogicType.RatioLiquidNitrogenInput": "The ratio of Жидкий азот in device's input network",
  "LogicType.RatioLiquidNitrogenInput2": "The ratio of Жидкий азот in device's Input2 network",
  "LogicType.RatioLiquidNitrogenOutput": "The ratio of Жидкий азот in device's Output network",
  "LogicType.RatioLiquidNitrogenOutput2": "The ratio of Жидкий азот in device's Output2 network",
  "LogicType.RatioLiquidNitrousOxide": "The ratio of Жидкая закись азота in device's Atmosphere",
  "LogicType.RatioLiquidNitrousOxideInput": "The ratio of Жидкая закись азота in device's Input Atmosphere",
  "LogicType.RatioLiquidNitrousOxideInput2": "The ratio of Жидкая закись азота in device's Input2 Atmosphere",
  "LogicType.RatioLiquidNitrousOxideOutput": "The ratio of Жидкая закись азота in device's device's Output Atmosphere",
  "LogicType.RatioLiquidNitrousOxideOutput2": "The ratio of Жидкая закись азота in device's Output2 Atmopshere",
  "LogicType.RatioLiquidOxygen": "The ratio of Жидкий кислород in device's Atmosphere",
  "LogicType.RatioLiquidOxygenInput": "The ratio of Жидкий кислород in device's Input Atmosphere",
  "LogicType.RatioLiquidOxygenInput2": "The ratio of Жидкий кислород in device's Input2 Atmosphere",
  "LogicType.RatioLiquidOxygenOutput": "The ratio of Жидкий кислород in device's device's Output Atmosphere",
  "LogicType.RatioLiquidOxygenOutput2": "The ratio of Жидкий кислород in device's Output2 Atmopshere",
  "LogicType.RatioLiquidPollutant": "The ratio of Жидкий токсин in device's Atmosphere",
  "LogicType.RatioLiquidPollutantInput": "The ratio of Жидкий токсин in device's Input Atmosphere",
  "LogicType.RatioLiquidPollutantInput2": "The ratio of Жидкий токсин in device's Input2 Atmosphere",
  "LogicType.RatioLiquidPollutantOutput": "The ratio of Жидкий токсин in device's device's Output Atmosphere",
  "LogicType.RatioLiquidPollutantOutput2": "The ratio of Жидкий токсин in device's Output2 Atmopshere",
  "LogicType.RatioLiquidVolatiles": "The ratio of Жидкие летучие вещества in device's Atmosphere",
  "LogicType.RatioLiquidVolatilesInput": "The ratio of Жидкие летучие вещества in device's Input Atmosphere",
  "LogicType.RatioLiquidVolatilesInput2": "The ratio of Жидкие летучие вещества in device's Input2 Atmosphere",
  "LogicType.RatioLiquidVolatilesOutput": "The ratio of Жидкие летучие вещества in device's device's Output Atmosphere",
  "LogicType.RatioLiquidVolatilesOutput2": "The ratio of Жидкие летучие вещества in device's Output2 Atmopshere",
  "LogicType.RatioNitrogen": "Процент азота в атмосфере",
  "LogicType.RatioNitrousOxide": "Процент закиси азота в атмосфере",
  "LogicType.RatioNitrousOxideInput": "The ratio of Закись азота in device's input network",
  "LogicType.RatioNitrousOxideInput2": "The ratio of Закись азота in device's Input2 network",
  "LogicType.RatioNitrousOxideOutput": "The ratio of Закись азота in device's Output network",
  "LogicType.RatioNitrousOxideOutput2": "The ratio of Закись азота in device's Output2 network",
  "LogicType.RatioOxygen": "Процент кислорода в атмосфере",
  "LogicType.RatioPollutant": "Процент токсинов в атмосфере",
  "LogicType.RatioSteam": "The ratio of Пар in device's Atmosphere",
  "LogicType.RatioSteamInput": "The ratio of Пар in device's Input Atmosphere",
  "LogicType.RatioSteamInput2": "The ratio of Пар in device's Input2 Atmosphere",
  "LogicType.RatioSteamOutput": "The ratio of Пар in device's device's Output Atmosphere",
  "LogicType.RatioSteamOutput2": "The ratio of Пар in device's Output2 Atmopshere",
  "LogicType.RatioVolatiles": "Процент летучих веществ в атмосфере",
  "LogicType.RatioWater": "Процент воды в атмосфере",
  "LogicType.Reagents": "Общее число реагентов, записанных устройстом",
  "LogicType.RecipeHash": "Текущий хэш рецепта, который выбран на изготовление в устройстве",
  "LogicType.RequestHash": "Если задан уникальный идентификатор, запрашивает элемент указанного типа из устройства",
  "LogicType.RequiredPower": "Количество потребляемой энергии в простое не равно полной потребляемой энергии",
  "LogicType.Setting": "Настройка переменной, которая может быть считана или записана (зависит от устройства)",
  "LogicType.SignalID": "Возвращает идентификатор контакта самого сильного сигнала от этого спутника",
  "LogicType.SignalStrength": "Возвращает силу самого сильного сигнала, полученного от этого спутника",
  "LogicType.SolarAngle": "Угол солнца девайса",
  "LogicType.TargetX": "Текущая позиция по оси X в мировых координатах",
  "LogicType.TargetY": "Текущая позиция по оси Y в мировых координатах",
  "LogicType.TargetZ": "Текущая позиция по оси Z в мировых координатах",
  "LogicType.Temperature": "Текущее показание температуры устройства",
  "LogicType.TemperatureExternal": "Температура снаружи устройства, обычно окружающая его атмосфера",
  "LogicType.TemperatureSetting": "Текущие параметры для внутренней температуры объекта (к примеру: A/C Прочного скафандра)",
  "LogicType.TotalMoles": "Возвращает общее число молей в устройстве",
  "LogicType.VelocityMagnitude": "Текущая величина вектора скорости",
  "LogicType.VelocityRelativeX": "Текущая скорость по оси X относительно прямого вектора",
  "LogicType.VelocityRelativeY": "Текущая скорость по оси Y относительно прямого вектора",
  "LogicType.VelocityRelativeZ": "Текущая скорость по оси Z относительно прямого вектора",
  "LogicType.Vertical": "Настройка вертикального угла устройства",
  "LogicType.VerticalRatio": "Коэффициент вертикальной настройки устройства",
  "LogicType.Volume": "Возвращает объем атмосферы устройства",
  "abs": "Регистр = абсолютное значение a",
  "acos": "Возвращает косинус указанного угла.",
  "add": "Регистр = a + b.",
  "alias": "Метки регистра или ссылка на устройство с именем, ссылки на устройства также влияют на то, что показано на винтах на основании IC.",
  "asin": "Возвращает угол, синус которого является указанным значением.",
  "atan": "Возвращает угол, тангенс которого является указанным значением.",
  "bap": "Ответвление на строку d, если abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
  "bapal": "Ответвление на строку c, если a != b, и сохранение номера следующей строки в ra",
  "bapz": "Ответвление на строку c, если abs(a) <= float.epsilon \\* 8",
  "bapzal": "Ответвление на строку c, если abs(a) <= float.epsilon \\* 8",
  "bdns": "Ответвление на строку a, если устройство d не установлено",
  "bdnsal": "Переход на строку a и сохранение номера следующей строки, если устройство не установлено",
  "bdse": "Ответвление на строку a, если устройство d установлено",
  "bdseal": "Переход на строку a и сохранение номера следующей строки, если устройство установлено",
  "beq": "Ответвление на строку c, если a == b",
  "beqal": "Ответвление на строку c, если a == b, и сохранение номера следующей строки в ra",
  "beqz": "Ответвление на строку b, если a == 0",
  "beqzal": "Ответвление на строку b, если a == 0, и сохранение номера следующей строки в ra",
  "bge": "Ответвление на строку c, если a >= b",
  "bgeal": "Ответвление на строку c, если a >= b, и сохранение номера следующей строки в ra",
  "bgez": "Ответвление на строку b, если a >= 0",
  "bgezal": "Ответвление на строку b, если a >= 0, и сохранение номера следующей строки в ra",
  "bgt": "Ответвление на строку c, если a > b",
  "bgtal": "Ответвление на строку c, если a > b, и сохранение номера следующей строки в ra",
  "bgtz": "Ответвление на строку b, если a > 0",
  "bgtzal": "Ответвление на строку b, если a > 0, и сохранение номера следующей строки в ra",
  "ble": "Ответвление на строку c, если a <= b",
  "bleal": "Ответвление на строку c, если a <= b, и сохранение номера следующей строки в ra",
  "blez": "Ответвление на строку b, если a <= 0",
  "blezal": "Ответвление на строку b, если a <= 0, и сохранение номера следующей строки в ra",
  "blt": "Ответвление на строку c, если a < b",
  "bltal": "Ответвление на строку c, если a < b, и сохранение номера следующей строки в ra",
  "bltz": "Ответвление на строку b, если a < 0",
  "bltzal": "Ответвление на строку b, если a < 0, и сохранение номера следующей строки в ra",
  "bna": "Ответвление на строку d, если abs(a - b) > max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
  "bnaal": "Ответвление на строку d, если abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8), и сохранение номера следующей строки в ra",
  "bnaz": "Ответвление на строку c, если abs(a) > float.epsilon \\* 8",
  "bnazal": "Ответвление на строку c, если abs(a) > float.epsilon \\* 8",
  "bne": "Ответвление на строку c, если a != b",
  "bneal": "Ответвление на строку c, если a != b, и сохранение номера следующей строки в ra",
  "bnez": "ответвление на строку b, если a != 0",
  "bnezal": "Ответвление на строку b, если a != 0, и сохранение номера следующей строки в ra",
  "brap": "Относительный переход на строку d, если abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
  "brapz": "Относительный переход на строку c, если abs(a) <= float.epsilon \\* 8",
  "brdns": "Относительный переход на строку a, если устройство не установлено",
  "brdse": "Относительный переход на строку a, если устройство не установлено",
  "breq": "Относительный переход на строку c, если a == b",
  "breqz": "Относительный переход на строку b, если a == 0",
  "brge": "Относительный переход на строку c, если a >= b",
  "brgez": "Относительный переход на строку b, если a >= 0",
  "brgt": "относительный переход на строку c, если a > b",
  "brgtz": "Относительный переход на строку b, если a > 0",
  "brle": "Относительный переход на строку c, если a <= b",
  "brlez": "Относительный переход на строку b, если a <= 0",
  "brlt": "Относительный переход на строку c, если a < b",
  "brltz": "Относительный переход на строку b, если a < 0",
  "brna": "Относительный переход на строку d, если abs(a - b) > max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
  "brnaz": "Относительный переход на строку c, если abs(a) > float.epsilon \\* 8",
  "brne": "Относительный переход на строку c, если a != b",
  "brnez": "Относительный переход на строку b, если a != 0",
  "ceil": "Регистр = наименьшее целое число больше a",
  "cos": "Возвращает косинус указанного угла.",
  "define": "Создает метку, которая будет заменена на протяжении всей программы указанным значением.",
  "div": "Регистр = a / b",
  "exp": "Регистр = exp(a)",
  "floor": "Регистр = наибольшее целое число меньше чем a",
  "hcf": "Остановиться и загореться",
  "j": "Переход на строку a",
  "jal": "Переход на строку a и сохранение номера следующей строки в ra",
  "jr": "Переход на строку А относительно текущей",
  "l": "Загружает var устройства в регистр.",
  "label": "НЕ РЕКОМЕНДУЕТСЯ",
  "log": "Регистр = log(a)",
  "ls": "Загружает слот переменной устройства в регистр.",
  "max": "Регистр = максимум из a или b",
  "min": "Регистр = минимум из a или b",
  "mod": "Регистр = a mod b (примечание: НЕ a % b)",
  "move": "Регистр = числовое значение или значение регистра.",
  "mul": "Регистр = a \\* b",
  "peek": "Регистр = значение верхнего стека",
  "pop": "Регистр = значение верхнего стека и уменьшает sp",
  "push": "Помещает значение a в стек и увеличивает sp",
  "rand": "Регистр = случайное значение x между 0 <= x < 1",
  "round": "Регистр = a, округлённое до ближайшего целого числа",
  "s": "Записывает значение регистра в var на устройстве.",
  "sap": "Регистр = 1, если abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8), иначе 0",
  "sapz": "Регистр = 1, если |a| <= float.epsilon \\* 8, иначе 0",
  "sb": "Записывает значение регистра в var на всех выходных сетевых устройствах с предоставленным типом хеша.",
  "sdns": "Регистр = 1, если устройство не задано, иначе 0",
  "sdse": "Регистр = 1, если устройство заданно, иначе 0.",
  "select": "Регистр = b, если ненулевой, иначе с",
  "seq": "Регистр = 1, если a == b, иначе 0",
  "seqz": "Регистр = 1, если a == 0, иначе 0",
  "sge": "Регистр = 1, если a >= b, иначе 0",
  "sgez": "Регистр = 1, если a >= 0, иначе 0",
  "sgt": "Регистр = 1, если a > b, иначе 0",
  "sgtz": "Регистр = 1, если a > 0, иначе 0",
  "sin": "Возвращает синус указанного угла.",
  "sle": "Регистр = 1, если a <= b, иначе 0",
  "sleep": "Приостановка выполнения программы на IC (в секундах)",
  "slez": "Регистр = 1, если a <= 0, иначе 0",
  "slt": "Регистр = 1, если a < b, иначе 0",
  "sltz": "Регистр = 1, если a < 0, иначе 0",
  "sna": "Регистр = 1, если abs(a - b) > max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8), иначе 0",
  "snaz": "Регистр = 1, если |a| > float.epsilon, иначе 0",
  "sne": "Регистр = 1, если a != b, иначе 0",
  "snez": "Регистр = 1, если a != 0, иначе 0",
  "sqrt": "Регистр = квадратный корень из a",
  "sub": "Регистр = a - b.",
  "tan": "Возвращает тангенс указанного угла.",
  "trunc": "Регистр = a с удалённой дробной частью",
  "yield": "Приостановка выполнения на 1 тик (0,5 секунд)"
}