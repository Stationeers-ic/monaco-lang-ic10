import { writeFile } from "node:fs/promises"
import z from "zod"
import { row, stringifyHtml } from "."
import instructionSnippets from "./instructionSnippets"

export default async function updateInstructionSnippets() {
	const instructions = await fetch("https://assets.ic10.dev/languages/EN/instructions.json").then((res) => res.json())

	const instruction = z.object({
		name: z.string().min(1),
		preview: z.string().min(1),
		snippet: z.string().optional(),
		description: z.string().optional(),
		deprecated: z.boolean().optional(),
	})
	type instruction = z.infer<typeof instruction>

	const instructionList: Map<string, instruction> = new Map()

	function getSnippet(entry: any): instruction | null {
		const result = {
			name: entry.name,
			preview: entry.example,
			snippet: instructionSnippets[entry.name] || undefined,
			description: stringifyHtml(entry.description) || undefined,
			deprecated: entry.deprecated || undefined,
		}
		if (instructionSnippets[entry.name] === undefined) {
			console.warn(`No snippet found for instruction: ${entry.name}`)
		}
		const parseResult = instruction.safeParse(result)
		if (!parseResult.success) {
			console.warn(`Failed to parse instruction: ${entry.name}`, parseResult.error.message)
			return null
		}
		return parseResult.data
	}

	for (const raw of Object.entries(instructions)) {
		const ins = getSnippet(raw[1])
		if (!ins) continue
		if (ins.name !== raw[0]) {
			console.warn(`Instruction name mismatch: key="${raw[0]}", name="${ins.name}"`)
			continue
		}

		instructionList.set(ins.name, ins)
	}
	console.log(`Fetched ${instructionList.size} instructions`)

	let fileContent = `// This file is auto-generated by tools/updateData/index.ts\n`
	fileContent += `export default [\n`
	for (const ins of instructionList.values()) {
		fileContent += row(`{`, 1)
		fileContent += row(`name: ${JSON.stringify(ins.name)},`, 2)
		if (ins.snippet) fileContent += row(`snippet: ${JSON.stringify(ins.snippet || "")},`, 2)
		fileContent += row(`preview: ${JSON.stringify(ins.preview)},`, 2)
		if (ins.description) fileContent += row(`description: ${JSON.stringify(ins.description)},`, 2)
		if (ins.deprecated) fileContent += row(`deprecated: true,`, 2)
		fileContent += row(`},`, 1)
	}
	fileContent += `] satisfies {\n`
	fileContent += row(`name: string`, 1)
	fileContent += row(`snippet?: string`, 1)
	fileContent += row(`preview: string`, 1)
	fileContent += row(`description?: string`, 1)
	fileContent += row(`deprecated?: boolean`, 1)
	fileContent += `}[] as {\n`
	fileContent += row(`name: string`, 1)
	fileContent += row(`snippet?: string`, 1)
	fileContent += row(`preview: string`, 1)
	fileContent += row(`description?: string`, 1)
	fileContent += row(`deprecated?: boolean`, 1)
	fileContent += `}[]\n`
	await writeFile("./src/data/instructions.ts", fileContent)
}
